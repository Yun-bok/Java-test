package chap06;

public class ex01 {
	public static void main(String[] args) {
		//비선형 구조 - 트리 , 그래프
		//이론적으로만
		//하나의 데이터(요소) 뒤에 여러개의 요소가 존재 할 수 있다.
		//요소 간의 관계가 1:n, n:n
		//계층적 구조(디렉토리)를 나타낼 때 사용
		
		//대표적으로 트리
		//트리
		//생활용품 -> 화장실용품 -> 청소용품
		// 부모-자식 간의 관계
		// 트리의 구성 - 노드 , 간선
		// 트리의 구성 - 노드, 간선 *노드 -> 데이터 담거나 표현하는 기본단위
		
		//루트노드(rootNode) - 최상위 노드(부모 X), 트리탐색 기준
		//리프노드(leafNode) - 자식이 없는 노드
		//*깊이(depth)	  - 루트를 기준으로 떨어진 거리 -> 루트노드부터 이어진 간선의 수 //깊이와 차수정도는 외우는게
		//*차수(degree)     - 자식 노드 수
		//높이(height)	  - 최상단 부모부터 최하단 자식까지의 깊이
		
		//N진 트리 - 각 노드의 자식이 N개 이하인것
		//이진 트리 - 기본(대표적)
		//->자식이 최대 2개
		
		//완전 이진 트리 -> 마지막 이전 레벨을 제외하곤 자식 2개씩 존재
		//         1
		//     2      3
		//   4   5  6   7
		//  8 9
		
		
		
		//이진 탐색트리
		//노드의 값을 부모보다 작은걸 좌측 큰걸 우측으로 배치
		//  10  9  8  11  13  15
		//
		//				10
		//			  9    11
		//		   8         13
		//					   15
		
		
		//트리의 특징
		//비선형 구조, 계층구조  (디렉토리,카테고리 등)
		// 각 노드는  하나의 부모노드를 가진다.
		//자식노드 0개이상
		//노드가 N개이면, 간선 N-1개
		
		//알고리즘
		// 너비우선탐색(BFS)
		//  - 최상단부터 좌측에서 우측으로 탐색(깊이를 하나씩 증가시키면서)
		//  깊이우선탐색(DFS)
		//  - 전위 중위 후위 -> 부모의 순서
		//  - 전위 순회 - 부모-> 좌측자식 -> 우측자식
		//  - 중위 순회 - 좌측자식 -> 부모 -> 우측자식
		//  - 후위 순회 - 좌측자식 -> 우측자식 ->부모
		//기사 시험에 자주나왔다고 한다
		
		
	}
}
